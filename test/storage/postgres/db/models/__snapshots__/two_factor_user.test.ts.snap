// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`two_factor_user should throw errors when empty strings are provided 1`] = `
Array [
  ValidationErrorItem {
    "instance": Object {
      "createdAt": 1970-01-01T00:00:00.000Z,
      "id": "",
      "provider": "",
      "secret": "",
      "updatedAt": 1970-01-01T00:00:00.000Z,
      "userId": "",
    },
    "message": "Validation isUUID on id failed",
    "origin": "FUNCTION",
    "original": [Error: Validation isUUID on id failed],
    "path": "id",
    "type": "Validation error",
    "validatorArgs": Array [
      4,
    ],
    "validatorKey": "isUUID",
    "validatorName": "isUUID",
    "value": "",
  },
  ValidationErrorItem {
    "instance": Object {
      "createdAt": 1970-01-01T00:00:00.000Z,
      "id": "",
      "provider": "",
      "secret": "",
      "updatedAt": 1970-01-01T00:00:00.000Z,
      "userId": "",
    },
    "message": "Validation notEmpty on id failed",
    "origin": "FUNCTION",
    "original": [Error: Validation notEmpty on id failed],
    "path": "id",
    "type": "Validation error",
    "validatorArgs": Array [
      true,
    ],
    "validatorKey": "notEmpty",
    "validatorName": "notEmpty",
    "value": "",
  },
  ValidationErrorItem {
    "instance": Object {
      "createdAt": 1970-01-01T00:00:00.000Z,
      "id": "",
      "provider": "",
      "secret": "",
      "updatedAt": 1970-01-01T00:00:00.000Z,
      "userId": "",
    },
    "message": "Validation isUUID on userId failed",
    "origin": "FUNCTION",
    "original": [Error: Validation isUUID on userId failed],
    "path": "userId",
    "type": "Validation error",
    "validatorArgs": Array [
      4,
    ],
    "validatorKey": "isUUID",
    "validatorName": "isUUID",
    "value": "",
  },
  ValidationErrorItem {
    "instance": Object {
      "createdAt": 1970-01-01T00:00:00.000Z,
      "id": "",
      "provider": "",
      "secret": "",
      "updatedAt": 1970-01-01T00:00:00.000Z,
      "userId": "",
    },
    "message": "Validation notEmpty on userId failed",
    "origin": "FUNCTION",
    "original": [Error: Validation notEmpty on userId failed],
    "path": "userId",
    "type": "Validation error",
    "validatorArgs": Array [
      true,
    ],
    "validatorKey": "notEmpty",
    "validatorName": "notEmpty",
    "value": "",
  },
  ValidationErrorItem {
    "instance": Object {
      "createdAt": 1970-01-01T00:00:00.000Z,
      "id": "",
      "provider": "",
      "secret": "",
      "updatedAt": 1970-01-01T00:00:00.000Z,
      "userId": "",
    },
    "message": "Validation notEmpty on secret failed",
    "origin": "FUNCTION",
    "original": [Error: Validation notEmpty on secret failed],
    "path": "secret",
    "type": "Validation error",
    "validatorArgs": Array [
      true,
    ],
    "validatorKey": "notEmpty",
    "validatorName": "notEmpty",
    "value": "",
  },
  ValidationErrorItem {
    "instance": Object {
      "createdAt": 1970-01-01T00:00:00.000Z,
      "id": "",
      "provider": "",
      "secret": "",
      "updatedAt": 1970-01-01T00:00:00.000Z,
      "userId": "",
    },
    "message": "Validation notEmpty on provider failed",
    "origin": "FUNCTION",
    "original": [Error: Validation notEmpty on provider failed],
    "path": "provider",
    "type": "Validation error",
    "validatorArgs": Array [
      true,
    ],
    "validatorKey": "notEmpty",
    "validatorName": "notEmpty",
    "value": "",
  },
]
`;

exports[`two_factor_user should throw errors when no data is provided 1`] = `
Array [
  ValidationErrorItem {
    "instance": Object {
      "createdAt": 1970-01-01T00:00:00.000Z,
      "id": "foo",
      "updatedAt": 1970-01-01T00:00:00.000Z,
    },
    "message": "TwoFactorUser.userId cannot be null",
    "origin": "CORE",
    "path": "userId",
    "type": "notNull Violation",
    "validatorArgs": Array [],
    "validatorKey": "is_null",
    "validatorName": null,
    "value": null,
  },
  ValidationErrorItem {
    "instance": Object {
      "createdAt": 1970-01-01T00:00:00.000Z,
      "id": "foo",
      "updatedAt": 1970-01-01T00:00:00.000Z,
    },
    "message": "TwoFactorUser.secret cannot be null",
    "origin": "CORE",
    "path": "secret",
    "type": "notNull Violation",
    "validatorArgs": Array [],
    "validatorKey": "is_null",
    "validatorName": null,
    "value": null,
  },
  ValidationErrorItem {
    "instance": Object {
      "createdAt": 1970-01-01T00:00:00.000Z,
      "id": "foo",
      "updatedAt": 1970-01-01T00:00:00.000Z,
    },
    "message": "TwoFactorUser.provider cannot be null",
    "origin": "CORE",
    "path": "provider",
    "type": "notNull Violation",
    "validatorArgs": Array [],
    "validatorKey": "is_null",
    "validatorName": null,
    "value": null,
  },
  ValidationErrorItem {
    "instance": Object {
      "createdAt": 1970-01-01T00:00:00.000Z,
      "id": "foo",
      "updatedAt": 1970-01-01T00:00:00.000Z,
    },
    "message": "Validation isUUID on id failed",
    "origin": "FUNCTION",
    "original": [Error: Validation isUUID on id failed],
    "path": "id",
    "type": "Validation error",
    "validatorArgs": Array [
      4,
    ],
    "validatorKey": "isUUID",
    "validatorName": "isUUID",
    "value": "foo",
  },
]
`;
